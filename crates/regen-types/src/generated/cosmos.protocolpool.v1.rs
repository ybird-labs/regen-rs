// This file is @generated by prost-build.
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the pool Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// FundCommunityPool defines a method to allow an account to directly
        /// fund the community pool.
        pub async fn fund_community_pool(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgFundCommunityPool,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgFundCommunityPoolResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/FundCommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "FundCommunityPool"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CommunityPoolSpend defines a governance operation for sending tokens from
        /// the community pool in the x/protocolpool module to another account, which
        /// could be the governance module itself. The authority is defined in the
        /// keeper.
        pub async fn community_pool_spend(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgCommunityPoolSpend,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgCommunityPoolSpendResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/CommunityPoolSpend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "CommunityPoolSpend"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CreateContinuousFund defines a method to distribute a percentage of funds to an address continuously.
        /// This ContinuousFund can be indefinite or run until a given expiry time.
        /// Funds come from validator block rewards from x/distribution, but may also come from
        /// any user who funds the ProtocolPoolEscrow module account directly through x/bank.
        pub async fn create_continuous_fund(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgCreateContinuousFund,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgCreateContinuousFundResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/CreateContinuousFund",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "CreateContinuousFund"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CancelContinuousFund defines a method for cancelling continuous fund.
        pub async fn cancel_continuous_fund(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgCancelContinuousFund,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgCancelContinuousFundResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/CancelContinuousFund",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Msg", "CancelContinuousFund"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/protocolpool module parameters.
        /// The authority is defined in the keeper.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgUpdateParams,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::MsgUpdateParamsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.protocolpool.v1.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service for community pool module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// CommunityPool queries the community pool coins.
        pub async fn community_pool(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryCommunityPoolRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryCommunityPoolResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/CommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Query", "CommunityPool"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ContinuousFund queries a continuous fund by the recipient is is associated with.
        pub async fn continuous_fund(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryContinuousFundRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryContinuousFundResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/ContinuousFund",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Query", "ContinuousFund"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ContinuousFunds queries all continuous funds in the store.
        pub async fn continuous_funds(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryContinuousFundsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryContinuousFundsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/ContinuousFunds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.protocolpool.v1.Query", "ContinuousFunds"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Params returns the total set of x/protocolpool parameters.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryParamsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::protocolpool::v1::QueryParamsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.protocolpool.v1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.protocolpool.v1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
    }
}
