// This file is @generated by prost-build.
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg is the cosmos.group.v1 Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
        pub async fn create_group(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgCreateGroup,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgCreateGroupResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/CreateGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "CreateGroup"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateGroupMembers updates the group members with given group id and admin address.
        pub async fn update_group_members(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupMembers,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupMembersResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/UpdateGroupMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "UpdateGroupMembers"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
        pub async fn update_group_admin(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupAdmin,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupAdminResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/UpdateGroupAdmin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "UpdateGroupAdmin"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
        pub async fn update_group_metadata(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupMetadata,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupMetadataResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/UpdateGroupMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "UpdateGroupMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
        pub async fn create_group_policy(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgCreateGroupPolicy,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgCreateGroupPolicyResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/CreateGroupPolicy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "CreateGroupPolicy"));
            self.inner.unary(req, path, codec).await
        }
        /// CreateGroupWithPolicy creates a new group with policy.
        pub async fn create_group_with_policy(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgCreateGroupWithPolicy,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgCreateGroupWithPolicyResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/CreateGroupWithPolicy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "CreateGroupWithPolicy"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateGroupPolicyAdmin updates a group policy admin.
        pub async fn update_group_policy_admin(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupPolicyAdmin,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/UpdateGroupPolicyAdmin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.group.v1.Msg", "UpdateGroupPolicyAdmin"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
        pub async fn update_group_policy_decision_policy(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/UpdateGroupPolicyDecisionPolicy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.group.v1.Msg",
                        "UpdateGroupPolicyDecisionPolicy",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateGroupPolicyMetadata updates a group policy metadata.
        pub async fn update_group_policy_metadata(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupPolicyMetadata,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/UpdateGroupPolicyMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.group.v1.Msg", "UpdateGroupPolicyMetadata"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SubmitProposal submits a new proposal.
        pub async fn submit_proposal(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgSubmitProposal,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgSubmitProposalResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/SubmitProposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "SubmitProposal"));
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawProposal withdraws a proposal.
        pub async fn withdraw_proposal(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgWithdrawProposal,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgWithdrawProposalResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/WithdrawProposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "WithdrawProposal"));
            self.inner.unary(req, path, codec).await
        }
        /// Vote allows a voter to vote on a proposal.
        pub async fn vote(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgVote,
            >,
        ) -> std::result::Result<
            tonic::Response<::cosmos_sdk_proto::cosmos::group::v1::MsgVoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/cosmos.group.v1.Msg/Vote");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("cosmos.group.v1.Msg", "Vote"));
            self.inner.unary(req, path, codec).await
        }
        /// Exec executes a proposal.
        pub async fn exec(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgExec,
            >,
        ) -> std::result::Result<
            tonic::Response<::cosmos_sdk_proto::cosmos::group::v1::MsgExecResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/cosmos.group.v1.Msg/Exec");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("cosmos.group.v1.Msg", "Exec"));
            self.inner.unary(req, path, codec).await
        }
        /// LeaveGroup allows a group member to leave the group.
        pub async fn leave_group(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgLeaveGroup,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::MsgLeaveGroupResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Msg/LeaveGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Msg", "LeaveGroup"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query is the cosmos.group.v1 Query service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// GroupInfo queries group info based on group id.
        pub async fn group_info(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupInfoRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupInfoResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "GroupInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// GroupPolicyInfo queries group policy info based on account address of group policy.
        pub async fn group_policy_info(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupPolicyInfoRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupPolicyInfoResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupPolicyInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "GroupPolicyInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// GroupMembers queries members of a group by group id.
        pub async fn group_members(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupMembersRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupMembersResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupMembers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "GroupMembers"));
            self.inner.unary(req, path, codec).await
        }
        /// GroupsByAdmin queries groups by admin address.
        pub async fn groups_by_admin(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupsByAdminRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupsByAdminResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupsByAdmin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "GroupsByAdmin"));
            self.inner.unary(req, path, codec).await
        }
        /// GroupPoliciesByGroup queries group policies by group id.
        pub async fn group_policies_by_group(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupPoliciesByGroupRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupPoliciesByGroupResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupPoliciesByGroup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.group.v1.Query", "GroupPoliciesByGroup"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GroupPoliciesByAdmin queries group policies by admin address.
        pub async fn group_policies_by_admin(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupPoliciesByAdminRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupPoliciesByAdminResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupPoliciesByAdmin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.group.v1.Query", "GroupPoliciesByAdmin"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Proposal queries a proposal based on proposal id.
        pub async fn proposal(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryProposalRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryProposalResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/Proposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "Proposal"));
            self.inner.unary(req, path, codec).await
        }
        /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
        pub async fn proposals_by_group_policy(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryProposalsByGroupPolicyRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryProposalsByGroupPolicyResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/ProposalsByGroupPolicy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.group.v1.Query", "ProposalsByGroupPolicy"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// VoteByProposalVoter queries a vote by proposal id and voter.
        pub async fn vote_by_proposal_voter(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryVoteByProposalVoterRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryVoteByProposalVoterResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/VoteByProposalVoter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "VoteByProposalVoter"));
            self.inner.unary(req, path, codec).await
        }
        /// VotesByProposal queries a vote by proposal id.
        pub async fn votes_by_proposal(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryVotesByProposalRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryVotesByProposalResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/VotesByProposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "VotesByProposal"));
            self.inner.unary(req, path, codec).await
        }
        /// VotesByVoter queries a vote by voter.
        pub async fn votes_by_voter(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryVotesByVoterRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryVotesByVoterResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/VotesByVoter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "VotesByVoter"));
            self.inner.unary(req, path, codec).await
        }
        /// GroupsByMember queries groups by member address.
        pub async fn groups_by_member(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupsByMemberRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupsByMemberResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/GroupsByMember",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "GroupsByMember"));
            self.inner.unary(req, path, codec).await
        }
        /// TallyResult returns the tally result of a proposal. If the proposal is
        /// still in voting period, then this query computes the current tally state,
        /// which might not be final. On the other hand, if the proposal is final,
        /// then it simply returns the `final_tally_result` state stored in the
        /// proposal itself.
        pub async fn tally_result(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryTallyResultRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryTallyResultResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/TallyResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "TallyResult"));
            self.inner.unary(req, path, codec).await
        }
        /// Groups queries all groups in state.
        pub async fn groups(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::group::v1::QueryGroupsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<::cosmos_sdk_proto::cosmos::group::v1::QueryGroupsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.group.v1.Query/Groups",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.group.v1.Query", "Groups"));
            self.inner.unary(req, path, codec).await
        }
    }
}
