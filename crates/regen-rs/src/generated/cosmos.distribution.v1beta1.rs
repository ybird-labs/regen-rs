// This file is @generated by prost-build.
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the distribution Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SetWithdrawAddress defines a method to change the withdraw address
        /// for a delegator (or validator self-delegation).
        pub async fn set_withdraw_address(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgSetWithdrawAddress,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "SetWithdrawAddress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawDelegatorReward defines a method to withdraw rewards of delegator
        /// from a single validator.
        pub async fn withdraw_delegator_reward(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "WithdrawDelegatorReward",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawValidatorCommission defines a method to withdraw the
        /// full commission to the validator address.
        pub async fn withdraw_validator_commission(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "WithdrawValidatorCommission",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FundCommunityPool defines a method to allow an account to directly
        /// fund the community pool.
        ///
        /// WARNING: This method will fail if an external community pool is used.
        pub async fn fund_community_pool(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgFundCommunityPool,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/FundCommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "FundCommunityPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/distribution
        /// module parameters. The authority is defined in the keeper.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgUpdateParams,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgUpdateParamsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.distribution.v1beta1.Msg", "UpdateParams"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CommunityPoolSpend defines a governance operation for sending tokens from
        /// the community pool in the x/distribution module to another account, which
        /// could be the governance module itself. The authority is defined in the
        /// keeper.
        ///
        /// WARNING: This method will fail if an external community pool is used.
        pub async fn community_pool_spend(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgCommunityPoolSpend,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/CommunityPoolSpend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "CommunityPoolSpend",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DepositValidatorRewardsPool defines a method to provide additional rewards
        /// to delegators to a specific validator.
        pub async fn deposit_validator_rewards_pool(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgDepositValidatorRewardsPool,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::MsgDepositValidatorRewardsPoolResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Msg/DepositValidatorRewardsPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Msg",
                        "DepositValidatorRewardsPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service for distribution module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Params queries params of the distribution module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryParamsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryParamsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.distribution.v1beta1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
        pub async fn validator_distribution_info(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorDistributionInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorOutstandingRewards queries rewards of a validator address.
        pub async fn validator_outstanding_rewards(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorOutstandingRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorCommission queries accumulated commission for a validator.
        pub async fn validator_commission(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorCommission",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ValidatorSlashes queries slash events of a validator.
        pub async fn validator_slashes(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "ValidatorSlashes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegationRewards queries the total rewards accrued by a delegation.
        pub async fn delegation_rewards(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegationRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegationRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegationTotalRewards queries the total rewards accrued by each
        /// validator.
        pub async fn delegation_total_rewards(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegationTotalRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegatorValidators queries the validators of a delegator.
        pub async fn delegator_validators(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegatorValidators",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DelegatorWithdrawAddress queries withdraw address of a delegator.
        pub async fn delegator_withdraw_address(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "cosmos.distribution.v1beta1.Query",
                        "DelegatorWithdrawAddress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CommunityPool queries the community pool coins.
        ///
        /// WARNING: This query will fail if an external community pool is used.
        pub async fn community_pool(
            &mut self,
            request: impl tonic::IntoRequest<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryCommunityPoolRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                ::cosmos_sdk_proto::cosmos::distribution::v1beta1::QueryCommunityPoolResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.distribution.v1beta1.Query/CommunityPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cosmos.distribution.v1beta1.Query", "CommunityPool"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
